events {}

http {
    # Log format definition
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Access and error log locations
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log debug;

    # Upstream definitions for services
    upstream auth_service {
        server authentication:6000;
    }

    upstream enter_data_service {
        server web-enter-data:8080;
    }

    upstream analysis_service {
        server analysis:5000; 
    }

    upstream show_results_service {
        server web-show-results:3000; 
    }

    server {
        listen 80;

        # Routes for Auth Service
        location ~ ^/login/?$ {
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location = /auth-verify {
            internal;
            proxy_pass http://auth_service/verify;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_pass_request_body off;
        }

        # Route for Enter Data Service with JWT validation
        location /enter-data/ {
            auth_request /auth-verify;
            proxy_pass http://enter_data_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        location /show-results/ {
            auth_request /auth-verify;
            proxy_pass http://show_results_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        # Error handling for 401 Unauthorized
        error_page 401 = @error401;

        # Handle 401 Unauthorized
        location @error401 {
            return 401 "Unauthorized: Invalid or expired token.";
        }

        # Default location for unmatched routes
        location / {
            return 404 "Not Found: The requested path does not exist.";
        }
    }
}