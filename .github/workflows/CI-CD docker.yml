name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: faisal2

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push web-show-results
        run: |
          docker build -t ${{ env.IMAGE_PREFIX }}/web-show-results:${{ github.sha }} ./web-show-results
          docker push ${{ env.IMAGE_PREFIX }}/web-show-results:${{ github.sha }}
          docker tag ${{ env.IMAGE_PREFIX }}/web-show-results:${{ github.sha }} ${{ env.IMAGE_PREFIX }}/web-show-results:latest
          docker push ${{ env.IMAGE_PREFIX }}/web-show-results:latest

      - name: Build and push web-enter-data
        run: |
          docker build -t ${{ env.IMAGE_PREFIX }}/web-enter-data:${{ github.sha }} ./web-enter-data
          docker push ${{ env.IMAGE_PREFIX }}/web-enter-data:${{ github.sha }}
          docker tag ${{ env.IMAGE_PREFIX }}/web-enter-data:${{ github.sha }} ${{ env.IMAGE_PREFIX }}/web-enter-data:latest
          docker push ${{ env.IMAGE_PREFIX }}/web-enter-data:latest

      - name: Build and push analysis
        run: |
          docker build -t ${{ env.IMAGE_PREFIX }}/analysis:${{ github.sha }} ./analysis
          docker push ${{ env.IMAGE_PREFIX }}/analysis:${{ github.sha }}
          docker tag ${{ env.IMAGE_PREFIX }}/analysis:${{ github.sha }} ${{ env.IMAGE_PREFIX }}/analysis:latest
          docker push ${{ env.IMAGE_PREFIX }}/analysis:latest

      - name: Build and push authentication
        run: |
          docker build -t ${{ env.IMAGE_PREFIX }}/authentication:${{ github.sha }} ./authentication
          docker push ${{ env.IMAGE_PREFIX }}/authentication:${{ github.sha }}
          docker tag ${{ env.IMAGE_PREFIX }}/authentication:${{ github.sha }} ${{ env.IMAGE_PREFIX }}/authentication:latest
          docker push ${{ env.IMAGE_PREFIX }}/authentication:latest

      - name: Build and push nginx-proxy
        run: |
          docker build -t ${{ env.IMAGE_PREFIX }}/nginx-proxy:${{ github.sha }} ./nginx-proxy
          docker push ${{ env.IMAGE_PREFIX }}/nginx-proxy:${{ github.sha }}
          docker tag ${{ env.IMAGE_PREFIX }}/nginx-proxy:${{ github.sha }} ${{ env.IMAGE_PREFIX }}/nginx-proxy:latest
          docker push ${{ env.IMAGE_PREFIX }}/nginx-proxy:latest

  test:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d

      - name: Wait for services to be healthy
        run: |
          sleep 30 # Adjust based on healthcheck timing
          docker-compose ps

      - name: Run tests
        run: |
          # Add test commands here, e.g., curl http://localhost:80 or custom test scripts
          # Example: docker exec web-enter-data npm test (if applicable)
          echo "Tests placeholder - implement per service"

      - name: Stop services
        run: |
          docker-compose down

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' # Only deploy on main branch push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to server
        env:
          DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          echo "$DEPLOY_KEY" > deploy_key
          chmod 600 deploy_key
          scp -i deploy_key docker-compose.yml $DEPLOY_USER@$DEPLOY_SERVER:/home/$DEPLOY_USER/
          ssh -i deploy_key $DEPLOY_USER@$DEPLOY_SERVER << 'EOF'
            docker-compose -f /home/$DEPLOY_USER/docker-compose.yml pull
            docker-compose -f /home/$DEPLOY_USER/docker-compose.yml up -d
          EOF
          rm deploy_key
